---
layout: layouts/base.liquid
title: Find Assistance Programs For You
permalink: 
  build: "/public-assistance/eligibility/index.html"
pageClass: "page-public-assistance"
---

<h1>{{title}}</h1>

<p>
  Use this tool to find assistance programs for which you qualify.  Fill in each field to the best of your knowledge.  <span class="bold">The information you enter here is completely private and will not be transmitted or stored in any way.</span>
</p>
<p>
  After entering your information, you will be provided with a list of assistance programs you can apply for.
</p>

<div id="form-top" class="step_indicator">
  <ul>
  </ul>
</div>

<form id="eligibility">
  {% eligSection "intro" %}
    {% eligPage "intro" %}
      <p>
        Introductory text.
      </p>
      <p>
        This form will ask you about a variety of things.
      </p>
    {% endeligPage %}
  {% endeligSection %}

  {% eligSection "yourself" %}
    <h2>Yourself</h2>
    <p>
      This section-level text will be shown for every page in this section.
    </p>
    {% eligPage "select-likes" %}
      <div>
        If "I like days of the week" is selected, a secondary follow-up page will be shown.  Otherwise, the form will move on to the next section.  Select all that apply:
        <ul class="multiselect">
          <li>
            <input id="likes-animals" type="checkbox" name="option">
            <label for="likes-animals">I like animals.</label>
          </li>
          <li>
            <input id="likes-vehicles" type="checkbox" name="option">
            <label for="likes-vehicles">I like vehicles.</label>
          </li>
          <li>
            <input id="likes-days" type="checkbox" name="option">
            <label for="likes-days">I like days of the week.</label>
          </li>
        </ul>
      </div>
    {% endeligPage %}
    {% eligPage "today" %}
      <p>
        This page is only shown if the user selected "I like days of the week" on the previous page.
      </p>
      <div>
        <label for="weekday">What day of the week is it?</label>
        <input id="weekday" type="text">
      </div>

      <div>
        <label for="date">What is the date?</label>
        <input id="date" type="number">
      </div>
    {% endeligPage %}
  {% endeligSection %}
  
  {% eligSection "household" %}
    <h2>Household</h2>
    {% eligPage "color" %}
      <p>
        Here we are in a new section.
      </p>
      <div>
        <label for="favorite-color">What is your favorite color?</label>
        <input id="favorite-color" type="text">
      </div>
    {% endeligPage %}
  {% endeligSection %}

  {% eligSection "income" %}
    <h2>Income</h2>
    {% eligPage "income" %}
      <p>
        This page demonstrates a dynamic field list, allowing users to add more fields to a list on demand.
      </p>
      <h3>Shopping List</h3>
      {% dynamicFieldList, "Add a new item" %}
        <h4>Item 1</h4>
        <div>
          <label for="dynamic-list-name">Name</label>
          <input id="dynamic-list-name" type="text">
        </div>
        <div>
          <label for="dynamic-list-qty">Quantity</label>
          <input id="dynamic-list-qty" type="number" class="short">
        </div>
      {% enddynamicFieldList %}
    {% endeligPage %}
  {% endeligSection %}

  {% eligSection "existing-assistance" %}
    <h2>Existing Assistance</h2>
    {% eligPage "assistance" %}
      More form fields to do.
    {% endeligPage %}
  {% endeligSection %}

  {% eligSection "results" %}
    <h2>Results</h2>
    {% eligPage "results" %}
      <p>
        This is an example results page that would show content based on form input values.
        <ul>
          <li>Result 1</li>
          <li>Result 2</li>
          <li>Result 3</li>
          <li>Result 4</li>
        </ul>
      </p>
    {% endeligPage %}
  {% endeligSection %}

  <div id="controls">
    <button type="button" class="btn btn_secondary hidden" id="back-button">Back</button>
    <button type="button" class="btn btn_primary" id="next-button">Next</button>
    <button type="button" class="btn btn_primary hidden" id="submit-button">Finish</button>
  </div>
</form>

<script>
  // This global variable holds the current state of the form navigation.
  let currentPage;

  // Shows or hides the element 'elem' via a class name.
  function setElementVisibility(elem, makeVisible) {
    if (elem) {
      if (makeVisible) {
        elem.classList.remove("hidden");
      } else {
        elem.classList.add("hidden");
      }
    }
  }

  // Makes the submit button visible or hidden.
  function setSubmitVisibility(makeVisible) {
    const submitButton = document.getElementById("submit-button");
    setElementVisibility(submitButton, makeVisible);
  }

  // Makes the next button visible or hidden.
  function setNextVisibility(makeVisible) {
    const nextButton = document.getElementById("next-button");
    setElementVisibility(nextButton, makeVisible);
  }

  // Makes the back button visible or hidden.
  function setBackVisibility(makeVisible) {
    const backButton = document.getElementById("back-button");
    setElementVisibility(backButton, makeVisible);
  }

  // Resets the viewport scroll so that the top of the form is visible.
  function resetScroll() {
    document.getElementById("form-top").scrollIntoView();
  }

  // Asks the user to confirm they want to leave.
  function confirmExit(event) {
    event.preventDefault();
    return event.returnValue = "Are you sure you want to exit?";
  }

  // Called when the user inputs data into a form element.
  function onInput(event) {
    // As soon as the user enters any data at all, register the beforeonload
    // event listener so that they can confirm they want to exit the form
    // when an unload is about to happen.
    addEventListener("beforeunload", confirmExit);
  }

  // Adds an item to a dynamic list of fields.
  function addDynamicFieldListItem() {
    const list = this.parentElement.parentElement.querySelector("ul.dynamic_field_list");
    const items = list.querySelectorAll("li");
    // Figure out the largest id index used so far.
    const lastInput = items[items.length - 1].querySelector("input");
    let lastIdNumber;
    if (lastInput) {
      lastIdNumber = lastInput.id.match(/-\d+$/g);
    }
    // Create a new item using the first item in the list as a template.
    const newItem = items[0].cloneNode(true);
    const newInputs = newItem.querySelectorAll("input");
    const newLabels = newItem.querySelectorAll("label");
    let newIdNumber = 1;
    if (lastIdNumber) {
      newIdNumber = Number(lastIdNumber[0].slice(1)) + 1;
    }
    // Ensure element id values are unique.
    for (const input of newInputs) {
      input.value = ""
      input.id = input.id + "-" + newIdNumber;
    }
    // Ensure labels match the new input id values.
    for (const label of newLabels) {
      label.setAttribute("for", label.getAttribute("for") + "-" + newIdNumber);
    }
    // Update the item heading if there is one.
    const itemHeading = newItem.querySelector("h3,h4,h5,h6");
    if (itemHeading) {
      itemHeading.textContent = itemHeading.textContent.replace(/\d+$/, newIdNumber + 1);
    }
    // Add a remove button for the new item.
    const removeButton = document.createElement("button");
    removeButton.classList.add("link");
    removeButton.textContent = "remove";
    removeButton.setAttribute("type", "button");
    removeButton.addEventListener("click", removeDynamicFieldListItem);
    const fragment = new DocumentFragment();
    fragment.append(" (", removeButton, ")");
    // If there is a heading, put the remove button after it.  Otherwise,
    // make it the first element in the list item.
    if (itemHeading) {
      itemHeading.after(fragment);
    } else {
      newItem.prepend(fragment);
    }
    // Add our new item to the list.
    list.appendChild(newItem);
  }

  function removeDynamicFieldListItem() {
    const item = this.parentElement;
    const list = this.closest(".dynamic_field_list");
    item.remove();
    list.dispatchEvent(new Event("input"));
  }

  // Marks the section as complete in the step indicator.
  function markSectionDone(section) {
    if (section.stepButton) {
      section.stepButton.classList.remove("todo");
      section.stepButton.classList.add("done");
    }
  }

  // Shows the appropriate buttons for the given 'page'.
  function configureButtons(page) {
    let resultsPage = !page.next();
    // TODO: Is there a better way than hard-coding this ID here?
    let finalInputPage = page.next()?.id == 'page-results'
    let firstPage = !page.previous;
    if (finalInputPage) {
      // This is the last page with user input, so show a submit button rather
      // than a generic next button.
      setBackVisibility(true);
      setNextVisibility(false);
      setSubmitVisibility(true);
    } else if (firstPage) {
      // This is the first page, so only show the next button.
      setBackVisibility(false);
      setNextVisibility(true);
      setSubmitVisibility(false);
    } else if (resultsPage) {
      // This is the very last page, so only show the back button.
      setBackVisibility(true);
      setNextVisibility(false);
      setSubmitVisibility(false);
    } else {
      // This is a regular page, so show back an next buttons.
      setBackVisibility(true);
      setNextVisibility(true);
      setSubmitVisibility(false);
    }
  }

  // Inserts a step indicator in the DOM based on the sections defined.
  // The step indicator serves two purposes:
  //   1. Show progress through the form
  //   2. Enable navigation back to already-completed sections
  // Note the text shown for each step in the progress indicator will be
  // the same as the <h2> text under each section element.  If a section does
  // not have a level 2 heading, no step indicator for that section will be 
  // added.
  function buildStepIndicator() {
    const allSections = document.querySelectorAll("div.elig_section");
    const stepIndicatorList = document.querySelector("div.step_indicator ul");
    for (const section of allSections) {
      // TODO: Support different text for the h2 and the step indicator.
      const heading = section.querySelector("h2");
      if (!heading) {
        // The section does not have a heading (e.g. intro) so don't put this
        // section in the step indicator.
        continue;
      }
      // Make the button that will be used for navigation to already-completed
      // sections.
      const button = document.createElement("button");
      button.id = "nav-" + section.id;
      button.dataset.sectionId = section.id;
      button.textContent = heading.textContent;
      // Sections are to-do and un-clickable by default.  They will become
      // clickable when the corresponding section is completed by the user.
      button.className = "todo";
      button.disabled = true;
      button.addEventListener("click", toSection);
      // Store a reference to the step indicator button in the section element
      // for easier access later.
      section.stepButton = button;
      // Make a container for the button.
      const listItem = document.createElement("li");
      // Put the button in the container and add it to the step indicator.
      listItem.appendChild(button);
      stepIndicatorList.appendChild(listItem);
    }
  }

  // Switches the form to the page 'toPage'.
  // The old page will be hidden and 'toPage' will be shown.  If the two pages
  // are in different sections, the old section will be hidden and the new
  // section containing 'toPage' will be shown.
  function switchToPage(toPage) {
    // Show the new page and hide the old.
    setElementVisibility(currentPage, false);
    setElementVisibility(toPage, true);
    // Check if the section is changing while also allowing toPage or
    // currentPage to be undefined.
    if (toPage?.section.id != currentPage?.section.id) {
      setElementVisibility(currentPage?.section, false);
      setElementVisibility(toPage?.section, true);
      // Update the step indicator to highlight the active section.
      if (currentPage?.section?.stepButton) {
        currentPage.section.stepButton.classList.remove("in_progress");
      }
      if (toPage?.section?.stepButton) {
        toPage.section.stepButton.classList.add("in_progress");
        // Always allow users to navigate directly to sections they have started
        // even if the section is not complete yet.
        toPage.section.stepButton.disabled = false;
      }
    }
    configureButtons(toPage);
    resetScroll();
    currentPage = toPage;
  }

  // Brings the user to the first page of a section.
  // This function is used as a step indicator click handler, and 'this' 
  // represents the context of the event, i.e. the button that was clicked.
  function toSection() {
    const section = document.getElementById(this.dataset.sectionId);
    if (section.id == "section-results") {
      // Ensure results are always up-to-date prior to showing them.
      // TODO: Determine if it would be better to invalidate results on
      // form data change and require the user to click the submit button
      // again before viewing results again.
      computeEligibility();
    }
    // Find the first page in the section.
    const toPage = section.querySelector("div.elig_page");
    if (toPage) {
      switchToPage(toPage);
    }
  }

  // Moves to the next form page in the sequence.
  // The sequence used is the one defined in linkPages.  
  function toNextPage() {
    const nextPage = currentPage.next();
    if (nextPage) {
      if (nextPage.section.id != currentPage.section.id) {
        // We are moving into a new section, so the old section should be
        // marked as completed.
        markSectionDone(currentPage.section);
      }
      // Take note of the page we are coming from to allow backwards travel with 
      // the Back form control button.
      nextPage.previous = currentPage;
      switchToPage(nextPage);
    }
  }

  // Moves to the previous form page in the sequence.  
  // This is not necessarily the form page the user was just on (for example, if 
  // they used the step progress indicator to revisit a completed section).  
  // Rather it can be thought of as the previous page as defined by the page
  // sequence from linkPages().
  function toPrevPage() {
    // Note currentPage.previous is set by toNextPage().
    const previousPage = currentPage.previous;
    if (previousPage) {
      switchToPage(previousPage);      
    }
  }

  // "Submits" the form.
  // Note no data is actually submitted anywhere, and instead the form inputs
  // are read and processed by computeEligibility().
  function submitForm() {
    computeEligibility();
    // Make the results page visible upon submit.
    // The submit button acts a lot like a next button preceding the results 
    // section.
    toNextPage();
    // The results section should immediately be marked done, since there are
    // no form fields to fill out in that section.
    markSectionDone(currentPage.section);
  }

  // Sets up listeners for the document.
  function addListeners() {
    // Form inputs
    const inputs = document.querySelectorAll("input, textarea, select");
    for (const input of inputs) {
      input.addEventListener("input", onInput);
    }
    const fieldListAddButtons = document.querySelectorAll(
      'button.field_list_add');
    for (const button of fieldListAddButtons) {
      button.addEventListener("click", addDynamicFieldListItem);
    }

    // Form control buttons
    document.getElementById("next-button").addEventListener("click", toNextPage);
    document.getElementById("back-button").addEventListener("click", toPrevPage);
    document.getElementById("submit-button").addEventListener("click", submitForm);
  }

  // Switches to the first form page in the document.
  function showFirstPage() {
    switchToPage(document.querySelector("div.elig_page"));
  }
  
  // Initializes the user interface.
  function initUi() {
    buildStepIndicator();
    // All pages and sections are initially hidden by default.
    showFirstPage();
  }

  // Gets all page elements and links them together in sequence.
  // The link is made via a new method on each page element called next().
  // This also adds the 'section' property to page elements for convenient
  // access to the containing section element.
  function linkPages() {
    const pages = document.querySelectorAll("div.elig_page");
    const pageById = {};
    for (let j = 0; j < pages.length; j++) {
      // Alias the parent element as 'section' for convenience.
      pages[j].section = pages[j].parentElement;
      // By default, each page will advance to the next page in the sequence,
      // regardless of form input.  For conditional next-page selection, 
      // add the logic to customPageLinking().
      pages[j].next = function() {
        return pages[j + 1];
      };
      // Store a hash map of page id to the page itself for faster page
      // retrieval when defining custom page linking.
      pageById[pages[j].id] = pages[j];
    }
    customPageLinking(pageById);
  }

  // Holder for all page advancing logic that is more complex than simply
  // "the next page in the sequence".
  function customPageLinking(pageById) {
    // In this example, the page 'page-select-likes' advances to
    // the page 'page-today' only if a certain form checkbox is selected.
    // Otherwise, the page 'page-select-likes' advances to the page
    // 'page-color'.
    pageById["page-select-likes"].next = function() {
      const likesDays = document.getElementById("likes-days").checked;
      if (likesDays) {
        return pageById["page-today"];
      } else {
        return pageById["page-color"];
      }
    };

    // TODO: Use custom logic as needed for other pages to conditionally choose 
    // the next page based on user input.
  }

  // Determines eligibility for programs based on user form input values.
  function computeEligibility() {
    console.log("TODO: Determine program eligibility");
    // TODO: Use all form inputs to generate a list of programs the user
    // is likely eligible for.
  }

  // Script entry point.
  function init() {
    linkPages();
    initUi();
    addListeners();
  }

  init();
</script>