---
layout: layouts/base.liquid
title: Check for Affordable Housing Updates
permalink: 
  build: "/housing/affordable-housing/changes/index.html"
pageClass: "smaller max_width"
maxUnits: 6
maxOfferings: 5
maxHouseholdSize: 12
---

{% comment %}
- open property website in a new window
- info tooltips for alternate max income and max occupancy
- enable getting next property or skipping a property
- add unit type string to "add rent offering"?
- highlight changes?
{% endcomment %}

{% assign allFields = "foo" | housingFields %}
{% assign housingFields = allFields.housingDatabase %}
{% assign unitsFields = allFields.units %}

<div class="flex align-flex-start">
<div class="split">
<div class="split_left_container">
<a href="" id="next-property" class="btn btn_secondary">Load next property</a>
<h2 id="apt-name-header">Loading property data...</h2>
<h3>Step 1</h3>
<p>The <a href="" target="_blank" rel="noopener" class="property-link">official information</a> about this property is shown to the right.</p>
<p>If the offical information seems to be broken or shows the wrong page, find a better link for this property and put it in the URL field <a href="#fldei8N0xw2VhjX9V">below</a>. The content to the right will automatically update.</p>
<h3>Step 2</h3>
<p>Make any edits necessary to make the information below match the offical property manager's information. If there is already information entered here that you can't confirm via the property manager's website, do not delete it.  When in doubt, prefer to keep the information you see below.</p>
<form id="housing-changes" name="housing_changes" netlify>

<div id="property-data">
<input type="hidden" id={{housingFields.ID.id}} name="ID">
{% fieldLabel "Property Name", housingFields, "APT_NAME" %}<br/>
{% formField housingFields, "APT_NAME", "20em" %}<br/>

{% fieldLabel "Address", housingFields, "ADDRESS" %} <span id="show-second-address" class="label"><a href="javascript:showSecondAddress()">Add a second address</a></span><br/>
{% formField housingFields, "ADDRESS", "20em" %}<br/>
<div id="second-address" hidden>
{% fieldLabel "Second address", housingFields, "SECOND_ADDRESS" %}<br/>
{% formField housingFields, "SECOND_ADDRESS" %}<br/>
</div>

{% fieldLabel "City", housingFields, "CITY" %}<br/>
{% formField housingFields, "CITY" %}<br/>

{% fieldLabel "ZIP Code", housingFields, "ZIP_CODE" %}<br/>
{% formField housingFields, "ZIP_CODE", "6em" %}<br/>

{% fieldLabel "Contact Phone", housingFields, "PHONE" %}<br/>
{% formField housingFields, "PHONE", "9em" %}<br/>

{% fieldLabel "Contact Email", housingFields, "EMAIL" %}<br/>
{% formField housingFields, "EMAIL", "25em" %}<br/>

{% fieldLabel "Management Company", housingFields, "MANAGEMENT_COMPANY" %}<br/>
{% formField housingFields, "MANAGEMENT_COMPANY", "20em" %}<br/>

{% fieldLabel "URL", housingFields, "PROPERTY_URL" %} <a href="" target="_blank" rel="noopener" class="label property-link">Visit this page</a><sup>&#8599;</sup><br/>
{% formField housingFields, "PROPERTY_URL", "35em" %}<br/>

{% fieldLabel "Total Units", housingFields, "UNITS_CNT" %}<br/>
{% formField housingFields, "UNITS_CNT", "5em" %}<br/>

<div class="multiselect" id="populations-served">
{% fieldLabel "Populations Served", housingFields, "POPULATIONS_SERVED" %}<br/>
{% formField housingFields, "POPULATIONS_SERVED" %}<br/>
</div>

<div id="min-age" hidden>
{% fieldLabel "Minimum Resident Age", housingFields, "MIN_RESIDENT_AGE" %}<br/>
{% formField housingFields, "MIN_RESIDENT_AGE", "4em" %}<br/>
</div>

<div id="max-age" hidden>
{% fieldLabel "Maximum Resident Age", housingFields, "MAX_RESIDENT_AGE" %}<br/>
{% formField housingFields, "MAX_RESIDENT_AGE", "4em" %}<br/>
</div>

{% formField housingFields, "ACCEPTS_VOUCHERS" %}
{% fieldLabel "Accepts Vouchers", housingFields, "ACCEPTS_VOUCHERS" %}<br/>

{% formField housingFields, "HAS_WHEELCHAIR_ACCESSIBLE_UNITS" %}
{% fieldLabel "Wheelchair Accessible Units", housingFields, "HAS_WHEELCHAIR_ACCESSIBLE_UNITS" %}<br/>

{% formField housingFields, "DISALLOWS_PUBLIC_APPLICATIONS" %}
{% fieldLabel "Only accepts referral applications", housingFields, "DISALLOWS_PUBLIC_APPLICATIONS" %}<br/>

{% formField housingFields, "PREFERS_LOCAL_APPLICANTS" %}
{% fieldLabel "Prefers applicants within the local city", housingFields, "PREFERS_LOCAL_APPLICANTS" %}<br/>
</div>

<div id="all-units">
{% assign unitEndIdx = maxUnits | plus: -1 %}
{% assign offeringEndIdx = maxOfferings | plus: -1 %}
{% for unitNum in (0..unitEndIdx) %}
  {% assign unitIdx = unitNum %}
	<div id="unit-{{unitNum}}" class="fieldset_box" hidden>
	<fieldset>
		<legend><span class="section_title">Unit Type</span>
		<div class="float-right">
      <button type="button" class="btn btn_secondary collapse_control">Collapse</button>
	  	<button type="button" class="btn btn_warning delete_unit">Delete</button>
	  </div>
		</legend>
		<div class="collapsible_content">
		{% indexFieldLabel unitIdx, "Type", unitsFields, "TYPE" %}<br/>
		{% indexFormField unitIdx, unitsFields, "TYPE" %}<br/>

		{% indexFieldLabel unitIdx, "Status", unitsFields, "STATUS" %}<br/>
		{% indexFormField unitIdx, unitsFields, "STATUS" %}<br/>

	  <span class="label">Occupancy Limits</span><br/>
		{% indexFormField unitIdx, unitsFields, "MIN_OCCUPANCY", "4em" %} to 
		{% indexFormField unitIdx, unitsFields, "MAX_OCCUPANCY", "4em" %} people<br/>

    {% assign alternateMinIncomeStr = "" %}
      {% for offerIdx in (0..offeringEndIdx) %}
        {% assign alternateMinIncomeStr = alternateMinIncomeStr | append: "OVERRIDE_MIN_YEARLY_INCOME_USD:" | append: unitIdx | append: ":" | append: offerIdx %}
        {% if forloop.last == false %}
          {% assign alternateMinIncomeStr = alternateMinIncomeStr | append: "," %}
        {% endif %}
      {% endfor %}
    <input type="checkbox" id="is-alternate-min-income:{{unitIdx}}" class="form_conditional is-alternate-min-income" data-primary-field="MIN_INCOME_RENT_FACTOR:{{unitIdx}}" data-alternate-field="{{alternateMinIncomeStr}}" data-conflict-resolution="alternate"> <label for="is-alternate-min-income:{{unitIdx}}">The minimum income is given as a dollar amount for this unit</label><br/>
    <div class="min-income">
		{% indexFieldLabel unitIdx, "Minimum Income", unitsFields, "MIN_INCOME_RENT_FACTOR" %}<br/> 
		{% indexFormField unitIdx, unitsFields, "MIN_INCOME_RENT_FACTOR", "5em" %} times yearly rent<br/>
		</div>
		<div class="min-income-alternate form_hint">
		Input the minimum income dollar amount within each rent offering below.
		</div>

	  <div class="all-offerings">
		{% for offerNum in (0..offeringEndIdx) %}
		  <div id="unit-{{unitNum}}-offering-{{offerNum}}" class="fieldset_box" hidden>
		  <fieldset>
			  <legend><span class="section_title">Rent Offering</span>
			  <div class="float-right">
          <button type="button" class="btn btn_secondary collapse_control">Collapse</button>
			    <button type="button" class="btn btn_warning delete_offering">Delete</button>
			  </div>
			  </legend>
			  <div class="collapsible_content">
			  {% assign offerIdx = unitNum | append: ":" | append: offerNum %}
			  <input type="hidden" id={{unitsFields.ID.id}} name={{"ID:" | append: offerIdx}}>
			  {% indexFieldLabel offerIdx, "Percent AMI", unitsFields, "PERCENT_AMI" %}<br/>
				{% indexFormField offerIdx, unitsFields, "PERCENT_AMI", "4em" %}%<br/>

        <input type="checkbox" id="is-alternate-rent:{{offerIdx}}" class="form_conditional is-alternate-rent" data-primary-field="RENT_PER_MONTH_USD:{{offerIdx}}" data-alternate-field="RENT_NOTES:{{offerIdx}}" data-conflict-resolution="primary"> <label for="is-alternate-rent:{{offerIdx}}">The rent is variable or can't be entered as a single number for this rent offering</label><br/>
				<div class="rent-value">
				{% indexFieldLabel offerIdx, "Rent", unitsFields, "RENT_PER_MONTH_USD" %}<br/>
				{% indexFormField offerIdx, unitsFields, "RENT_PER_MONTH_USD", "5em" %} $/month<br/>
				</div>
				<div class="rent-alternate">
				{% indexFieldLabel offerIdx, "Rent Description", unitsFields, "RENT_NOTES" %}<br/>
				{% indexFormField offerIdx, unitsFields, "RENT_NOTES", "25em"%}<br/>
				</div>

        <div class="min-income-alternate">
		    {% indexFieldLabel offerIdx, "Minimum Income", unitsFields, "OVERRIDE_MIN_YEARLY_INCOME_USD" %}<br/> 
		    {% indexFormField offerIdx, unitsFields, "OVERRIDE_MIN_YEARLY_INCOME_USD", "7em" %} $/year<br/>
		    </div>

        {% assign primaryMaxIncomeStr = "" %}
        {% for hhSize in (1..maxHouseholdSize) %}
          {% assign primaryMaxIncomeStr = primaryMaxIncomeStr | append: "MAX_YEARLY_INCOME_HH_" | append: hhSize | append: "_USD:" | append: offerIdx %}
          {% if forloop.last == false %}
            {% assign primaryMaxIncomeStr = primaryMaxIncomeStr | append: "," %}
          {% endif %}
        {% endfor %}
 				<input type="checkbox" id="is-alternate-max-income:{{offerIdx}}" class="form_conditional is-alternate-max-income" data-primary-field="{{primaryMaxIncomeStr}}" data-alternate-field="OVERRIDE_MAX_YEARLY_INCOME_LOW_USD:{{offerIdx}},OVERRIDE_MAX_YEARLY_INCOME_HIGH_USD:{{offerIdx}}" data-conflict-resolution="alternate"> <label for="is-alternate-max-income:{{offerIdx}}">The maximum income is not broken down by household size for this rent offering</label><br/>
				<table class="max-income">
				<tr>
				<th>Household Size</th>
				<th>Maximum Income</th>
				</tr>
				{% for hhSize in (1..maxHouseholdSize) %}
				<tr>
				{% assign fieldname = "MAX_YEARLY_INCOME_HH_" | append: hhSize | append: "_USD" %}
				{% if hhSize == 1 %}
				  {% assign hhSizeStr = hhSize | append: " person" %}
				{% else %}
				  {% assign hhSizeStr = hhSize | append: " people" %}
				{% endif %}
				<td>{% indexFieldLabel offerIdx, hhSizeStr, unitsFields, fieldname %}</td>
				<td>${% indexFormField offerIdx, unitsFields, fieldname, "7em" %} per year</td>
				</tr>
				{% endfor %}
				</table>

				<div class="max-income-alternate">
				Maximum Income Range<br/>
		    {% indexFormField offerIdx, unitsFields, "OVERRIDE_MAX_YEARLY_INCOME_LOW_USD", "7em" %}
		    {% indexFieldLabel offerIdx, "", unitsFields, "OVERRIDE_MAX_YEARLY_INCOME_LOW_USD" %} to
		    {% indexFormField offerIdx, unitsFields, "OVERRIDE_MAX_YEARLY_INCOME_HIGH_USD", "7em" %}
		    {% indexFieldLabel offerIdx, "", unitsFields, "OVERRIDE_MAX_YEARLY_INCOME_HIGH_USD" %} $/year
		    <br/>
		    </div>
		    </div>
		  </fieldset>
		  </div>
		{% endfor %}
	  </div>	
	  <button type="button" class="btn btn_secondary add_offering">Add rent offering</button>
	  </div>
	</fieldset>
	</div>
{% endfor %}
</div>

<button type="button" id="add-unit" class="btn btn_secondary">Add unit type</button>

<br/><br/><label for="user-notes" style="white-space: break-spaces; display: block; width: 30em">Not sure how to input some of this property's information? Need to leave a note for the reviewer? Enter it here.</label>
<textarea id="user-notes" name="userNotes" style="width: 30em; height: 6em"></textarea>

<h3>Step 3</h3>
<p>Submit these changes for review by The United Effort Organization.</p>
<button type="submit" class="btn btn_primary">Submit for review</button>
</form>
</div>
</div>
<div class="split sticky">
  <div class="split_right_container">
    <iframe src="https://www.firstcommunityhousing.org/property-bettyanngardens"></iframe>
  </div>
</div>
</div>

<script>

function addUnit() {
  if (unitIdx < {{maxUnits | plus: -1}}) {
    unitIdx++;
    let newUnit = document.querySelectorAll("#all-units > div")[unitIdx];
    newUnit.removeAttribute("hidden");
    if (unitIdx == {{maxUnits | plus: -1}}) {
      document.getElementById("add-unit").setAttribute("disabled", "disabled");
    }
  } 
}

function addOffering() {
  let unitDiv = this.parentNode.parentNode.parentNode;
  let thisUnitId = unitDiv.id.split("-")[1];
  if (offeringIdx[thisUnitId] < {{maxOfferings | plus: -1}}) {
    offeringIdx[thisUnitId] = offeringIdx[thisUnitId] + 1;
    let newOffering = unitDiv.querySelectorAll(".all-offerings > div")[offeringIdx[thisUnitId]];
    newOffering.removeAttribute("hidden");
    if (offeringIdx[thisUnitId] == {{maxOfferings | plus: -1}}) {
      unitDiv.querySelector(".add_offering").setAttribute("disabled", "disabled");
    }
  }
}

function clearNodeForm(node) {
	let allInputs = node.querySelectorAll("input, textarea, select");
	for (input of allInputs) {
	  if (input.tagName == "TEXTAREA") {
	    input.innerHTML = "";
	  } else if (input.tagName == "SELECT") {
	    let options = input.childNodes;
	    for (option of options) {
	      option.removeAttribute("selected");
	    }
	    input.firstChild.setAttribute("selected", "selected");
	  } else if (input.tagName == "INPUT") {
	    if (input.type == "checkbox") {
	      input.removeAttribute("checked");
	    } else {
	      input.value = "";
	    }
	  }
	  if (input.onchange) {
	    input.onchange();
	  }
	}
}

function deleteUnit() {
  let deletedUnit = this.parentNode.parentNode.parentNode.parentNode;
	if (unitIdx >= 0) {
	  deletedUnit.setAttribute("hidden", "hidden");
	  let deletedUnitId = deletedUnit.id.split("-")[1];
	  let unitsContainer = document.getElementById("all-units");
	  unitsContainer.appendChild(deletedUnit);
	  unitIdx--;
	  clearNodeForm(deletedUnit);
	  // Remove all offerings from the deleted unit.
	  let offerings = deletedUnit.querySelectorAll(".all-offerings > div")
	  for (offering of offerings) {
	    offering.setAttribute("hidden", "hidden");
	  }
	  offeringIdx[deletedUnitId] = -1;
	  if (unitIdx < {{maxUnits | plus: -1}}) {
      document.getElementById("add-unit").removeAttribute("disabled");
    }
	}
}

function deleteOffering() {
	let deletedOffering = this.parentNode.parentNode.parentNode.parentNode;
	let unitDiv = deletedOffering.parentNode.parentNode.parentNode.parentNode;
	let thisUnitIdx = unitDiv.id.split("-")[1];
	if (offeringIdx[thisUnitIdx] >= 0) {
	  deletedOffering.setAttribute("hidden", "hidden");
	  let offeringsContainer = unitDiv.querySelector(".all-offerings");
	  offeringsContainer.appendChild(deletedOffering);
	  offeringIdx[thisUnitIdx] = offeringIdx[thisUnitIdx] - 1;
	  clearNodeForm(deletedOffering);
	  if (offeringIdx[thisUnitIdx] < {{maxOfferings | plus: -1}}) {
      unitDiv.querySelector(".add_offering").removeAttribute("disabled");
    }
	}
}

function expandCollapsible(content, button) {
	content.removeAttribute("hidden");
	button.innerHTML = "Collapse";
}

function collapseCollapsible(content, button) {
	content.setAttribute("hidden", "hidden");
	button.innerHTML = "Expand";
}

function toggleCollapsible() {
	let contentDiv = this.parentNode.parentNode.parentNode.querySelector(".collapsible_content");
	if (contentDiv.hasAttribute("hidden")) {
	  expandCollapsible(contentDiv, this);
	} else {
	  collapseCollapsible(contentDiv, this);
	}
}

function showSecondAddress() {
	document.getElementById("second-address").removeAttribute("hidden");
  document.getElementById("show-second-address").setAttribute("hidden", "hidden");
}

function updatePropertyLink() {
	let links = document.getElementsByClassName("property-link");
	let iframe = document.getElementsByTagName("iframe")[0];
	if (this.value.search(/https?:\/\//) != 0) {
	  this.value = "http://" + this.value;
	}
	for (link of links) {
	  link.href = this.value;
	}
	iframe.src = this.value;
}

function updatePageTitle() {
	document.getElementById("apt-name-header").innerHTML = this.value;
}

function updateUnitHeading() {
  let heading = this.parentNode.parentNode.querySelector(".section_title");
  let unitTypeStr = "";
  if (this.value)	{
    unitTypeStr = `: ${this.value}`;
  } 
  heading.innerHTML = `Unit Type${unitTypeStr}`;
}

function updateOfferingHeading() {
  let heading = this.parentNode.parentNode.querySelector(".section_title");
  let offeringStr = "";
  if (this.value)	{
    offeringStr = `: ${this.value}% AMI`;
  } 
  heading.innerHTML = `Rent Offering${offeringStr}`;
}

function updateSelectColor() {
	let options = this.childNodes;
	for (option of options) {
	  if (option.selected) {
	    let color = option.dataset.color;
	    if (color) {
	      this.style.backgroundColor = `var(--airtable-color-${color})`;
	    } else {
	      this.style.backgroundColor = "";
	    }
	  }
	}
}

function updateMultiselectColors() {
	let options = this.querySelectorAll("input[type=checkbox]");
	for (option of options) {
	  let label = option.nextSibling.nextSibling;
	  label.style.backgroundColor = "";
	  if (option.checked) {
	    let color = option.dataset.color;
	    if (color) {
	      label.style.backgroundColor = `var(--airtable-color-${color})`;
	    } 
	  }
	}
}

function prefillField(field, value) {
	let isMultiselect = field.parentNode.className == "multiselect";
  if (!value) { return; }
  if (field.tagName == "INPUT") {
    if (field.type == "checkbox") {
      let doCheck = false;
      if (isMultiselect) {
        doCheck = value.includes(field.value);
      } else {
        doCheck = value;
      }
      if (doCheck) {
        field.setAttribute("checked", "checked");
      }
    } else {
      field.value = value;
    }
  } else if (field.tagName == "TEXTAREA") {
    field.innerHTML = value;
  } else if (field.tagName == "SELECT") {
    for (option of field.childNodes) {
      if (option.value == value) {
        option.setAttribute("selected", "selected");
        break;
      }
    }
  } 
 
  if (field.onchange) {
    field.onchange();
  }
  if (isMultiselect && field.parentNode.onchange) {
    field.parentNode.onchange();
  }
}

function prefillForm(data) {
  const fieldSelector = "input, textarea, select";
  let propertySection = document.getElementById("property-data");
  let unitsSection = document.getElementById("all-units");
	let propertyFields = propertySection.querySelectorAll(fieldSelector);
	let unitsFields = unitsSection.querySelectorAll(fieldSelector);
	//let unitsFormConditionals = unitsSection.querySelctorAll(".form_conditional");
	
	for (field of propertyFields) {
	  let value = data.housing.fields[field.name];
	  prefillField(field, value);
	}

  for (field of unitsFields) {
    let [fieldName, unitIdx, offerIdx] = field.name.split(":");
    // If there is not offer index, this field applies to all offerings in the unit.
    // The values of these fields are the same for every offering, so just take
    // the first one.
    if (offerIdx === undefined) {
      offerIdx = 0;
    }
    if (field.className.includes("form_conditional")) {
      if (!field.dataset.primaryField || !field.dataset.alternateField) {
        continue;
      }
      let primaryFields = field.dataset.primaryField.split(",");
      let alternateFields = field.dataset.alternateField.split(",");
      let primaryFieldUsed = false;
      let alternateFieldUsed = false;
      console.log("primaryFields:");
      for (primaryField of primaryFields) {
        let [primaryFieldName, primaryUnitIdx, primaryOfferIdx] = primaryField.split(":");
        if (primaryOfferIdx === undefined) {
          primaryOfferIdx = 0;
        }
        if (primaryUnitIdx < data.units.length && primaryOfferIdx < data.units[primaryUnitIdx].length) {
          console.log(" " + primaryField);
          let primaryValue = data.units[primaryUnitIdx][primaryOfferIdx].fields[primaryFieldName];
          if (primaryValue) {
            primaryFieldUsed = true;
            console.log("  primary has data");
            break;
          }
        }
      }
      console.log("alternateFields:");
      for (alternateField of alternateFields) {
        let [alternateFieldName, alternateUnitIdx, alternateOfferIdx] = alternateField.split(":");
        if (alternateOfferIdx === undefined) {
          alternateOfferIdx = 0;
        }
        if (alternateUnitIdx < data.units.length && alternateOfferIdx < data.units[alternateUnitIdx].length) {
          console.log(" " + alternateField);
          let alternateValue = data.units[alternateUnitIdx][alternateOfferIdx].fields[alternateFieldName];
          if (alternateValue) {
            alternateFieldUsed = true;
            console.log("  alternate has data");
            break;
          }
        }
      }
      console.log(" ");
      
      if (alternateFieldUsed) {
        if (!primaryFieldUsed || (primaryFieldUsed && field.dataset.conflictResolution == "alternate")) {
          field.checked = true;
          if (field.onchange) {
            field.onchange()
          }
        }
      }
    } else {
      if (unitIdx < data.units.length && offerIdx < data.units[unitIdx].length) {
        let value = data.units[unitIdx][offerIdx].fields[fieldName];
        prefillField(field, value);
      }
    }
  }
}

function initUnitVisibility(data) {
  let numUsedUnits = data.units.length;
	let unitDivs = document.querySelectorAll("#all-units > div");
  for (i = 0; i < unitDivs.length; i++) {
    if (i < numUsedUnits) {
      unitDivs[i].removeAttribute("hidden");
      let numUsedOfferings = data.units[i].length;
      let offeringDivs = unitDivs[i].querySelectorAll(".all-offerings > div");
      for (j = 0; j < offeringDivs.length; j++) {
        if (j < numUsedOfferings) {
          offeringDivs[j].removeAttribute("hidden");
        } else {
          offeringDivs[j].setAttribute("hidden", "hidden");
        }
      }
    } else {
      unitDivs[i].setAttribute("hidden", "hidden");
    }
  }
}

function updateMaxIncomeRowsVisibility() {
  let unitContainer = this.parentNode;
  let offeringContainers = unitContainer.querySelectorAll("fieldset")
  let minOccupancyField = unitContainer.querySelector("[name*=MIN_OCCUPANCY]");
  let maxOccupancyField = unitContainer.querySelector("[name*=MAX_OCCUPANCY]");
	let minHhSize = parseInt(minOccupancyField.value || 0);
  let maxHhSize = parseInt(maxOccupancyField.value || {{maxHouseholdSize}});
  for (i = 0; i < offeringContainers.length; i++) {
	  let maxIncomeRows = offeringContainers[i].querySelectorAll(".max-income tr");
	  for (j = 1; j < maxIncomeRows.length; j++) {
	    // Skip the header row, start j at 1.
	    if (j < minHhSize || j > maxHhSize) {
	      maxIncomeRows[j].setAttribute("hidden", "hidden");
	      maxIncomeRows[j].querySelector("input").value = "";
	    } else {
	      maxIncomeRows[j].removeAttribute("hidden");
	    }
	  }
	}
}

function updateAgeVisibility() {
	let seniorsOption = document.getElementById("fldkzU54q8lYtIH7G:seniors");
	let youthOption = document.getElementById("fldkzU54q8lYtIH7G:youth");
	let minAge = document.getElementById("min-age");
	let maxAge = document.getElementById("max-age");
	if (seniorsOption.checked && youthOption.checked) {
    minAge.removeAttribute("hidden");
    maxAge.removeAttribute("hidden");
	} else if (seniorsOption.checked && !youthOption.checked) {
    minAge.removeAttribute("hidden");
    maxAge.setAttribute("hidden", "hidden");
    clearNodeForm(maxAge);
	} else if (!seniorsOption.checked && youthOption.checked) {
    minAge.removeAttribute("hidden");
    maxAge.removeAttribute("hidden");
	} else {
    minAge.setAttribute("hidden", "hidden");
    maxAge.setAttribute("hidden", "hidden");
    clearNodeForm(minAge);
    clearNodeForm(maxAge);
	}
}

function updateRentVisibility() {
  let offeringContainer = this.parentNode;
	let rentValueInput = offeringContainer.getElementsByClassName("rent-value")[0];
	let rentAlternateInput = offeringContainer.getElementsByClassName("rent-alternate")[0];
	if (this.checked) {
	  rentValueInput.setAttribute("hidden", "hidden");
	  clearNodeForm(rentValueInput);
	  rentAlternateInput.removeAttribute("hidden");
	} else {
	  rentValueInput.removeAttribute("hidden");
	  rentAlternateInput.setAttribute("hidden", "hidden");
	  clearNodeForm(rentAlternateInput);
	}
}

function updateMinIncomeVisibility() {
	let unitContainer = this.parentNode;
	let minIncomeInput = unitContainer.querySelector(".min-income");
	//let minIncomeAlternateHint = unitContainer.querySelector(".min-income-alternate-hint");
	let minIncomeAlternateInputs = unitContainer.querySelectorAll(".min-income-alternate");
	if (this.checked) {
	  minIncomeInput.setAttribute("hidden", "hidden");
	  clearNodeForm(minIncomeInput);
	  //minIncomeAlternateHint.removeAttribute("hidden");
	  for (alternateInput of minIncomeAlternateInputs) {
	    alternateInput.removeAttribute("hidden");
	  }
	} else {
	  minIncomeInput.removeAttribute("hidden");
	  //minIncomeAlternateHint.setAttribute("hidden", "hidden");
	  for (alternateInput of minIncomeAlternateInputs) {
	    alternateInput.setAttribute("hidden", "hidden");
	    clearNodeForm(alternateInput);
	  }
	}
}

function updateMaxIncomeVisibility() {
	let offeringContainer = this.parentNode;
	let maxIncomeTable = offeringContainer.querySelector("table.max-income");
	let maxIncomeAlternateInput = offeringContainer.querySelector(".max-income-alternate");
	if (this.checked) {
	  maxIncomeTable.setAttribute("hidden", "hidden");
	  clearNodeForm(maxIncomeTable);
	  maxIncomeAlternateInput.removeAttribute("hidden");
	} else {
	  maxIncomeTable.removeAttribute("hidden");
	  maxIncomeAlternateInput.setAttribute("hidden", "hidden");
	  clearNodeForm(maxIncomeAlternateInput);
	}
}

function updateNextPropertyButton(id) {
	let button = document.getElementById("next-property");
	button.href = "/housing/affordable-housing/changes?id=" + id;
}

function sortRents(values) {
	let sorted = values.sort(function(a, b) {
    // Compare rent offerings.
	  // If both offerings have differing rent, sort according to those.  
	  // Otherwise, use min income if available.
	  // Otherwise, use max income (the low end of the range) if available.
	  // If the offerings have none of those three values, don't sort at all, as 
	  // there is nothing to compare against.
	  let compA = 0;
	  let compB = 0;
	  if (a.fields.RENT_PER_MONTH_USD && 
	      b.fields.RENT_PER_MONTH_USD && 
	      a.fields.RENT_PER_MONTH_USD != b.fields.RENT_PER_MONTH_USD) {
	    compA = a.fields.RENT_PER_MONTH_USD;
	    compB = b.fields.RENT_PER_MONTH_USD;
	  } else if (a.fields.MIN_YEARLY_INCOME_USD && 
	             b.fields.MIN_YEARLY_INCOME_USD &&
	             a.fields.MIN_YEARLY_INCOME_USD != b.fields.MIN_YEARLY_INCOME_USD) {
	    compA = a.fields.MIN_YEARLY_INCOME_USD;
	    compB = b.fields.MIN_YEARLY_INCOME_USD;
	  } else if (
	      a.fields.MAX_YEARLY_INCOME_LOW_USD && 
	      b.fields.MAX_YEARLY_INCOME_LOW_USD &&
	      a.fields.MAX_YEARLY_INCOME_LOW_USD != b.fields.MAX_YEARLY_INCOME_LOW_USD) {
	    compA = a.fields.MAX_YEARLY_INCOME_LOW_USD;
	    compB = b.fields.MAX_YEARLY_INCOME_LOW_USD;
	  }
	  if (compA < compB) {
	    return -1;
	  }
	  if (compA > compB) {
	    return 1;
	  }
	  return 0;
	});
	return sorted;
}

function sortUnitTypes(values) {
  let sorted = values.sort(function(a, b) {
    let valA = a;
    let valB = b;
    // Return < 0 if 'a' should go before 'b'
    // Return > 0 if 'b' should go before 'a'
    if ((valA === "SRO" && valB === "Studio") || // SRO before Studio.
        (valA === "SRO" || valA === "Studio") || // SRO/Studio always first.
        (valB === "Others")) { // Others always last.
      return -1; 
    }
    if ((valA === "Studio" && valB === "SRO") || // SRO before Studio
        (valB === "SRO" || valB === "Studio") || // SRO/Studio always first.
        (valA === "Others")) { // Others always last.
      return 1;
    }
    if (valA < valB) {
      return -1;
    }
    if (valA > valB) {
      return 1;
    }
    return 0;
  });
  return sorted;
}

function groupDataByUnitType(data) {
	let groupedData = {};
	groupedData.housing = data.housing;
	groupedData.units = [];
	let tempMap = {}
	for (unitRecord of data.units) {
    let typeKey = unitRecord.fields["TYPE"];
    tempMap[typeKey] = tempMap[typeKey] || [];
    tempMap[typeKey].push(unitRecord);
  }
  for (unitType of sortUnitTypes(Object.keys(tempMap))) {
    groupedData.units.push(sortRents(tempMap[unitType]));
  }
  console.log(groupedData);
  return groupedData;
}

let selects = document.querySelectorAll("#housing-changes select");
for (select of selects) {
  // Exclude the city field, as the color adds no information without 
  // the context of other property records visible.
  if (select.id != "fldFH0HVaoZY3KV0C") {
	  select.onchange = updateSelectColor;
	}
}

let multiselects = document.querySelectorAll(".multiselect");
for (multiselect of multiselects) {
	multiselect.onchange = updateMultiselectColors;
}

let occupancies = document.querySelectorAll("[name*=OCCUPANCY]");
for (occupancy of occupancies) {
	occupancy.onchange = updateMaxIncomeRowsVisibility;
}

let unitTypes = document.querySelectorAll("[id*=fldJ4fP1y13NE6ywu]");
for (unitType of unitTypes) {
	unitType.onchange = updateUnitHeading;
}

let amiPercents = document.querySelectorAll("[id*=fldBHf0GmnBHnZBFI]");
for (amiPercent of amiPercents) {
	amiPercent.onchange = updateOfferingHeading;
}

let addOfferingButtons = document.querySelectorAll("button.add_offering");
for (button of addOfferingButtons) {
	button.onclick = addOffering;
}

let deleteOfferingButtons = document.querySelectorAll("button.delete_offering");
for (button of deleteOfferingButtons) {
	button.onclick = deleteOffering;
}

let deleteUnitButtons = document.querySelectorAll("button.delete_unit");
for (button of deleteUnitButtons) {
	button.onclick = deleteUnit;
}

let collapseButtons = document.querySelectorAll("button.collapse_control");
for (button of collapseButtons) {
	button.onclick = toggleCollapsible;
}

// Ensure the live link to the external property page updates when the URL value is changed.
document.getElementById("fldei8N0xw2VhjX9V").onchange = updatePropertyLink;

document.getElementById("fldkzU54q8lYtIH7G:seniors").onchange = updateAgeVisibility;
document.getElementById("fldkzU54q8lYtIH7G:youth").onchange = updateAgeVisibility;
document.getElementById("fldMcM49qaNr3EQ2a").onchange = updatePageTitle;
document.getElementById("add-unit").onclick = addUnit;

let alternateRentCheckboxes = document.querySelectorAll(".is-alternate-rent");
for (checkbox of alternateRentCheckboxes) {
  checkbox.onchange = updateRentVisibility;
  checkbox.onchange();
}

let alternateMinIncomeCheckboxes = document.querySelectorAll(".is-alternate-min-income");
for (checkbox of alternateMinIncomeCheckboxes) {
  checkbox.onchange = updateMinIncomeVisibility;
  checkbox.onchange();
}

let alternateMaxIncomeCheckboxes = document.querySelectorAll(".is-alternate-max-income");
for (checkbox of alternateMaxIncomeCheckboxes) {
  checkbox.onchange = updateMaxIncomeVisibility;
  checkbox.onchange();
}

let unitIdx = 0;
let offeringIdx = new Array({{maxUnits | plus: -1}}).fill(-1);
let urlParams = new URLSearchParams(window.location.search);
if (urlParams.has("id")) {
  let propertyId = urlParams.get("id");
	fetch("/housing/affordable-housing/rawdata/" + propertyId)
  .then(response => response.json())
  .then(data => {
    let groupedData = groupDataByUnitType(data);
    unitIdx = groupedData.units.length - 1;
    for (i = 0; i < groupedData.units.length; i++) {
      offeringIdx[i] = groupedData.units[i].length - 1;
    }
    initUnitVisibility(groupedData);
    prefillForm(groupedData);
  });
  fetch("/housing/affordable-housing/next-property/" + propertyId)
  .then(response => response.json())
  .then(data => {
    updateNextPropertyButton(data.nextId);
  });
  //document.getElementById("reset-link").href="changes?id=" + propertyId;
}



</script>


