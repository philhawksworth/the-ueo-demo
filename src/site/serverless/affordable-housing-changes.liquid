---
layout: layouts/base.liquid
title: Check for Affordable Housing Updates
permalink: 
  build: "/housing/affordable-housing/changes/index.html"
pageClass: "smaller"
---

{% assign allFields = "foo" | housingFields %}
{% assign housingFields = allFields.housingDatabase %}
{% assign unitsFields = allFields.units %}

<h2 id="apt-name-header">Loading property data...</h2>
<h3>Step 1</h3>
<p><a href="" target="_blank" rel="noopener" class="property-link">Open the official information about this property</a></p>
<h3>Step 2</h3>
<p>Make any edits necessary to make the information below match the offical property manager's information.</p>
<form style="display:block;" id="housing-changes" name="housing_changes" netlify>
<input type="hidden" name="form-name" value="housing_changes" />

<div id="property-data">
{% fieldLabel "Property Name", housingFields, "APT_NAME" %}<br/>
{% formField housingFields, "APT_NAME", "20em" %}<br/>

{% fieldLabel "Address", housingFields, "ADDRESS" %} <span id="show-second-address" class="label"><a href="javascript:showSecondAddress()">Add a second address</a></span><br/>
{% formField housingFields, "ADDRESS" %}<br/>
<div id="second-address" hidden>
{% fieldLabel "Second address", housingFields, "SECOND_ADDRESS" %}<br/>
{% formField housingFields, "SECOND_ADDRESS" %}<br/>
</div>

{% fieldLabel "City", housingFields, "CITY" %}<br/>
{% formField housingFields, "CITY" %}<br/>

{% fieldLabel "ZIP Code", housingFields, "ZIP_CODE" %}<br/>
{% formField housingFields, "ZIP_CODE", "6em" %}<br/>

{% fieldLabel "Contact Phone", housingFields, "PHONE" %}<br/>
{% formField housingFields, "PHONE", "9em" %}<br/>

{% fieldLabel "Contact Email", housingFields, "EMAIL" %}<br/>
{% formField housingFields, "EMAIL", "25em" %}<br/>

{% fieldLabel "Management Company", housingFields, "MANAGEMENT_COMPANY" %}<br/>
{% formField housingFields, "MANAGEMENT_COMPANY", "20em" %}<br/>

{% fieldLabel "URL", housingFields, "PROPERTY_URL" %} <a href="" target="_blank" rel="noopener" class="label property-link">Visit this page</a><sup>&#8599;</sup><br/>
{% formField housingFields, "PROPERTY_URL", "30em" %}<br/>

{% fieldLabel "Total Units", housingFields, "UNITS_CNT" %}<br/>
{% formField housingFields, "UNITS_CNT", "4em" %}<br/>

<div class="multiselect" id="populations-served">
{% fieldLabel "Populations Served", housingFields, "POPULATIONS_SERVED" %}<br/>
{% formField housingFields, "POPULATIONS_SERVED" %}<br/>
</div>

<div id="min-age" hidden>
{% fieldLabel "Minimum Resident Age", housingFields, "MIN_RESIDENT_AGE" %}<br/>
{% formField housingFields, "MIN_RESIDENT_AGE", "4em" %}<br/>
</div>

<div id="max-age" hidden>
{% fieldLabel "Maximum Resident Age", housingFields, "MAX_RESIDENT_AGE" %}<br/>
{% formField housingFields, "MAX_RESIDENT_AGE", "4em" %}<br/>
</div>

{% fieldLabel "Accepts Vouchers", housingFields, "ACCEPTS_VOUCHERS" %}
{% formField housingFields, "ACCEPTS_VOUCHERS" %}<br/>

{% fieldLabel "Wheelchair Accessible Units", housingFields, "HAS_WHEELCHAIR_ACCESSIBLE_UNITS" %}
{% formField housingFields, "HAS_WHEELCHAIR_ACCESSIBLE_UNITS" %}<br/>

{% fieldLabel "Only accepts referral applications", housingFields, "DISALLOWS_PUBLIC_APPLICATIONS" %}
{% formField housingFields, "DISALLOWS_PUBLIC_APPLICATIONS" %}<br/>

{% fieldLabel "Prefers applicants within the local city", housingFields, "PREFERS_LOCAL_APPLICANTS" %}
{% formField housingFields, "PREFERS_LOCAL_APPLICANTS" %}<br/>
</div>

<div id="all-units">
{% for unitNum in (0..5) %}
  {% assign unitIdx = unitNum | append: ":0" %}
	<div id="unit-{{unitNum}}" class="fieldset-box">
	<fieldset>
		<legend>Unit Type
		<button type="button" class="btn btn_warning float-right">Delete</button>
		</legend>
		{% indexFieldLabel unitIdx, "Type", unitsFields, "TYPE" %}<br/>
		{% indexFormField unitIdx, unitsFields, "TYPE" %}<br/>

		{% indexFieldLabel unitIdx, "Status", unitsFields, "STATUS" %}<br/>
		{% indexFormField unitIdx, unitsFields, "STATUS" %}<br/>

	  <span class="label">Occupancy Limits</span><br/>
		{% indexFormField unitIdx, unitsFields, "MIN_OCCUPANCY", "4em" %} to 
		{% indexFormField unitIdx, unitsFields, "MAX_OCCUPANCY", "4em" %} people<br/>

	  <div id="unit-{{unitNum}}-all-offerings">
		{% for offerNum in (0..3) %}
		  <div id="unit-{{unitNum}}-offering-{{offerNum}}" class="fieldset-box">
		  <fieldset>
			  <legend>Rent Offering
			  <button type="button" class="btn btn_warning float-right">Delete</button>
			  </legend>
			  {% assign offerIdx = unitNum | append: ":" | append: offerNum %}
			  {% indexFieldLabel offerIdx, "Percent AMI", unitsFields, "PERCENT_AMI" %}<br/>
				{% indexFormField offerIdx, unitsFields, "PERCENT_AMI", "4em" %}%<br/>

				{% indexFieldLabel offerIdx, "Rent", unitsFields, "RENT_PER_MONTH_USD" %}<br/>
				{% indexFormField offerIdx, unitsFields, "RENT_PER_MONTH_USD", "5em" %} $/month<br/>

				{% indexFieldLabel offerIdx, "Minimum Income", unitsFields, "MIN_INCOME_RENT_FACTOR" %}<br/> 
				{% indexFormField offerIdx, unitsFields, "MIN_INCOME_RENT_FACTOR", "4em" %} times yearly rent<br/>

				<table class="max-income">
				<tr>
				<th>Household Size</th>
				<th>Maximum Income</th>
				</tr>
				{% for hhSize in (1..12) %}
				<tr>
				{% assign fieldname = "MAX_YEARLY_INCOME_HH_" | append: hhSize | append: "_USD" %}
				<td>{% indexFieldLabel offerIdx, hhSize, unitsFields, fieldname %}</td>
				<td>${% indexFormField offerIdx, unitsFields, fieldname, "7em" %} per year</td>
				</tr>
				{% endfor %}
				</table>
		  </fieldset>
		  </div>
		{% endfor %}
	  </div>	
	  <button type="button" onclick="addUnit();" class="btn btn_secondary">Add rent offering</button>
	</fieldset>
	</div>
{% endfor %}
</div>

<button type="button" onclick="addUnit();" class="btn btn_secondary">Add unit type</button>

<h3>Step 3</h3>
<p>Submit these changes for review by The United Effort Organization.</p>
<button type="submit" class="btn btn_primary">Submit for review</button>
</form>

<script>

function addUnit() {
  if (unitIdx < 9) {
    unitIdx++;
    let newUnit = document.querySelectorAll("#all-units > div")[unitIdx];
    newUnit.removeAttribute("hidden");
    //document.getElementById("unit-" + (numUnits - 1)).removeAttribute("hidden");
  }
}

function clearUnitForm(unitDiv) {
	let allInputs = unitDiv.querySelectorAll("input, textarea, select");
	for (input of allInputs) {
	  if (input.tagName == "TEXTAREA") {
	    input.innerHTML = "";
	  } else if (input.tagName == "SELECT") {
	    let options = input.childNodes;
	    for (option of options) {
	      option.removeAttribute("selected");
	    }
	    input.firstChild.setAttribute("selected", "selected");
	  } else if (input.tagName == "INPUT") {
	    if (input.type == "checkbox") {
	      input.removeAttribute("checked");
	    } else {
	      input.value = "";
	    }
	  }
	}
}

function deleteUnit() {
  let deletedUnit = this.parentNode.parentNode.parentNode;
	if (unitIdx >= 0) {
	  deletedUnit.setAttribute("hidden", "hidden");
	  let unitsContainer = document.getElementById("all-units");
	  unitsContainer.appendChild(deletedUnit);
	  unitIdx--;
	  clearUnitForm(deletedUnit);
	}
}

function showSecondAddress() {
	document.getElementById("second-address").removeAttribute("hidden");
  document.getElementById("show-second-address").setAttribute("hidden", "hidden");
}

function updatePropertyLink() {
	let links = document.getElementsByClassName("property-link");
	for (link of links) {
	  link.href = this.value;
	}
}

function updatePageTitle() {
	document.getElementById("apt-name-header").innerHTML = this.value;
}

function updateSelectColor() {
	let options = this.childNodes;
	for (option of options) {
	  if (option.selected) {
	    let color = option.dataset.color;
	    if (color) {
	      this.style.backgroundColor = `var(--airtable-color-${color})`;
	    } else {
	      this.style.backgroundColor = "";
	    }
	  }
	}
}

function updateMultiselectColors() {
	let options = this.querySelectorAll("input[type=checkbox]");
	for (option of options) {
	  let label = option.nextSibling.nextSibling;
	  label.style.backgroundColor = "";
	  if (option.checked) {
	    let color = option.dataset.color;
	    if (color) {
	      label.style.backgroundColor = `var(--airtable-color-${color})`;
	    } 
	  }
	}
}

function prefillField(field, value) {
	let isMultiselect = field.parentNode.className == "multiselect";
  if (!value) { return; }
  if (field.tagName == "INPUT") {
    if (field.type == "checkbox") {
      let doCheck = false;
      if (isMultiselect) {
        doCheck = value.includes(field.value);
      } else {
        doCheck = value;
      }
      if (doCheck) {
        field.setAttribute("checked", "checked");
      }
    } else {
      field.value = value;
    }
  } else if (field.tagName == "TEXTAREA") {
    field.innerHTML = value;
  } else if (field.tagName == "SELECT") {
    for (option of field.childNodes) {
      if (option.value == value) {
        option.setAttribute("selected", "selected");
        break;
      }
    }
  } 
 
  if (field.onchange) {
    field.onchange();
  }
  if (isMultiselect && field.parentNode.onchange) {
    field.parentNode.onchange();
  }
}

function prefillForm(data) {
  const fieldSelector = "input, textarea, select";
  let propertySection = document.getElementById("property-data");
  let unitsSection = document.getElementById("all-units");
	let propertyFields = propertySection.querySelectorAll(fieldSelector);
	console.log(propertyFields);
	let unitsFields = unitsSection.querySelectorAll(fieldSelector);
	
	for (field of propertyFields) {
	  let value = data.housing.fields[field.name];
	  prefillField(field, value);
	}

  for (field of unitsFields) {
    let [fieldName, unitIdx, offerIdx] = field.name.split(":");
    if (unitIdx < data.units.length && offerIdx < data.units[unitIdx].length) {
      let value = data.units[unitIdx][offerIdx].fields[fieldName];
      prefillField(field, value);
    }
  }
}

function initUnitVisibility(data) {
  let numUsedUnits = data.units.length;
	let unitDivs = document.querySelectorAll("#all-units > div");
  for (i = 0; i < unitDivs.length; i++) {
    if (i < numUsedUnits) {
      let numUsedOfferings = data.units[i].length;
      let offeringDivs = unitDivs[i].querySelectorAll("#unit-" + i + "-all-offerings > div");
      for (j = numUsedOfferings; j < offeringDivs.length; j++) {
        offeringDivs[j].setAttribute("hidden", "hidden");
      }
    } else {
      unitDivs[i].setAttribute("hidden", "hidden");
    }
  }
}

function updateMaxIncomeVisibility() {
  console.log("updateMaxIncomeVisibility called.");
  let unitContainer = this.parentNode;
  let offeringContainers = unitContainer.querySelectorAll("fieldset")
  console.log(offeringContainers);
  let minOccupancyField = unitContainer.querySelector("[name*=MIN_OCCUPANCY]");
  let maxOccupancyField = unitContainer.querySelector("[name*=MAX_OCCUPANCY]");
	let minHhSize = parseInt(minOccupancyField.value || 0);
  let maxHhSize = parseInt(maxOccupancyField.value || maxIncomeRows.length);
  for (i = 0; i < offeringContainers.length; i++) {
	  let maxIncomeRows = offeringContainers[i].querySelectorAll(".max-income tr");
	  for (j = 1; j < maxIncomeRows.length; j++) {
	    // Skip the header row, start j at 1.
	    if (j < minHhSize || j > maxHhSize) {
	      maxIncomeRows[j].setAttribute("hidden", "hidden");
	      maxIncomeRows[j].querySelector("input").value = "";
	    } else {
	      maxIncomeRows[j].removeAttribute("hidden");
	    }
	  }
	}
}

function updateAgeVisibility() {
	let seniorsOption = document.getElementById("fldkzU54q8lYtIH7G:seniors");
	let youthOption = document.getElementById("fldkzU54q8lYtIH7G:youth");
	let minAge = document.getElementById("min-age");
	let maxAge = document.getElementById("max-age");
	if (seniorsOption.checked && youthOption.checked) {
    minAge.removeAttribute("hidden");
    maxAge.removeAttribute("hidden");
	} else if (seniorsOption.checked && !youthOption.checked) {
    minAge.removeAttribute("hidden");
    maxAge.setAttribute("hidden", "hidden");
	} else if (!seniorsOption.checked && youthOption.checked) {
    minAge.removeAttribute("hidden");
    maxAge.removeAttribute("hidden");
	} else {
    minAge.setAttribute("hidden", "hidden");
    maxAge.setAttribute("hidden", "hidden");
	}
}

function groupDataByUnitType(data) {
	let groupedData = {};
	groupedData.housing = data.housing;
	groupedData.units = [];
	let tempMap = {}
	for (unitRecord of data.units) {
    let typeKey = unitRecord.fields["TYPE"];
    tempMap[typeKey] = tempMap[typeKey] || [];
    tempMap[typeKey].push(unitRecord);
  }
  for (unitType in tempMap) {
    groupedData.units.push(tempMap[unitType]);
  }
  //groupedData.units = tempMap;
  console.log(groupedData);
  return groupedData;
}

let units = document.querySelectorAll("#all-units > div");
for (unit of units) {
	let deleteButton = unit.querySelector("button");
	deleteButton.onclick = deleteUnit;
}

let selects = document.querySelectorAll("#housing-changes select");
for (select of selects) {
	select.onchange = updateSelectColor;
}

let multiselects = document.querySelectorAll(".multiselect");
for (multiselect of multiselects) {
	multiselect.onchange = updateMultiselectColors;
}

let occupancies = document.querySelectorAll("[name*=OCCUPANCY]");
for (occupancy of occupancies) {
	occupancy.onchange = updateMaxIncomeVisibility;
}

// Ensure the live link to the external property page updates when the URL value is changed.
document.getElementById("fldei8N0xw2VhjX9V").onchange = updatePropertyLink;

document.getElementById("fldkzU54q8lYtIH7G:seniors").onchange = updateAgeVisibility;
document.getElementById("fldkzU54q8lYtIH7G:youth").onchange = updateAgeVisibility;
document.getElementById("fldMcM49qaNr3EQ2a").onchange = updatePageTitle;

let unitIdx = 0;
let urlParams = new URLSearchParams(window.location.search);
if (urlParams.has("id")) {
  let propertyId = urlParams.get("id");
	fetch("/housing/affordable-housing/rawdata/" + propertyId)
  .then(response => response.json())
  .then(data => {
    let groupedData = groupDataByUnitType(data);
    unitIdx = groupedData.units - 1;
    initUnitVisibility(groupedData);
    prefillForm(groupedData);
  });
  //document.getElementById("reset-link").href="changes?id=" + propertyId;
}



</script>


